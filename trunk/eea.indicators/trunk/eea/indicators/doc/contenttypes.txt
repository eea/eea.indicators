The Indicators Database
=======================

:vim: set ft=doctest:

We have several main content types. The most important are the Specification and their Assessments.

	>>> self.loginAsPortalOwner()
	>>> from Products.CMFCore.utils import getToolByName
	>>> setuptool = getToolByName(portal, 'portal_setup')
	>>> setuptool.setImportContext('profile-eea.dataservice:default')
	>>> log = setuptool.runAllImportSteps()
	>>> setuptool.setImportContext('profile-eea.indicators:default')
	>>> log = setuptool.runAllImportSteps()

Containments
------------
The Specifications are implicitly addable. It is the duty of the portal manager to 
create a special folder to store them. 

	>>> id = self.portal.invokeFactory('Folder', 'ims')
	>>> ims = portal[id]

Inside this folder we will add Specifications:

	>>> id = ims.invokeFactory("Specification", 'spec1')
	>>> spec = ims[id]

Specifications are containers for several types of objects: 

	>>> id = spec.invokeFactory("PolicyQuestion", 'pq')
	>>> id = spec.invokeFactory("MethodologyReference", "mr")
	>>> id = spec.invokeFactory("RationaleReference", "rr")
	>>> id = spec.invokeFactory("WorkItem", "wi")
	>>> id = spec.invokeFactory("Assessment", 'as')

An Assessment can contain AssessmentParts:

	>>> as = spec['as']
	>>> id = as.invokeFactory("AssessmentPart", 'ap')

An AssessmentPart can contain EEAFigures:

	>>> ap = as['ap']
	>>> id = ap.invokeFactory("EEAFigure", 'ef')

Inside the ims folder, where the Specification was created, we will also create several
other objects that can be referenced from the Specification.

	>>> id = ims.invokeFactory("ExternalDataSpec", 'eds')
	>>> id = ims.invokeFactory("PolicyDocumentReference", 'pdr')


Relationships
-------------
The IMS uses the relatedItems field to store all relationships. We use the eea.relations 
widget and infrastructure to be able to specify which object a relation can contain.

	>>> reltool = portal['portal_relations']

Specifications can point to  PolicyDocumentReferences, ExternalDataSpecs and Data 
(from eea.dataservice).

	>>> id = ims.invokeFactory("Data", 'dt')
	>>> spec.setRelatedItems([ims['dt'], ims['eds'], ims['pdr']])

AssessmentParts point to the answered PolicyQuestion (but the relatedItems field here
is not multiValued):

	>>> ap.setRelatedItems(spec['pq'])

Installing the eea.indicators package will execute a setup step that installs new
objects in the portal_relations tools:

	>>> relations = getToolByName(portal, 'portal_relations')
	>>> ids = set(relations.objectIds())
	>>> our_ids = set(['specification', 'eea-data', 
	...								 'policy-document-reference', 'specification-eea-data', 
	...								 'specification-policy-document-reference'])
	>>> ids.intersection(our_ids) == our_ids
	True

Versioning and utility views
----------------------------
