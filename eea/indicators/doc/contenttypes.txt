The Indicators Database
=======================

:vim: set ft=doctest:

We have several main content types. The most important are the Specification and their Assessments.

	>>> self.loginAsPortalOwner()
	>>> from Products.CMFCore.utils import getToolByName
	>>> setuptool = getToolByName(portal, 'portal_setup')
	>>> setuptool.setImportContext('profile-eea.dataservice:default')
	>>> log = setuptool.runAllImportSteps()
	>>> setuptool.setImportContext('profile-eea.indicators:default')
	>>> log = setuptool.runAllImportSteps()

    >>> from Products.Five.testbrowser import Browser
    >>> from Products.PloneTestCase import PloneTestCase
    >>> browser = Browser()
    >>> browser.handleErrors = False
    >>> self.portal.error_log._ignored_exceptions = ()
    >>> browser.addHeader('Authorization',
    ...                   'Basic %s:%s' % (PloneTestCase.portal_owner,
    ...                                    PloneTestCase.default_password))
    >>> def types_in_container(container):
    ...     types = [t.__class__.__name__ for t in container.objectValues()]
    ...     return sorted(types)
    >>>

Containments
------------
The Specifications are implicitly addable. It is the duty of the portal manager to 
create a special folder to store them. 

	>>> id = self.portal.invokeFactory('Folder', 'ims')
	>>> ims = portal[id]

Inside this folder we will add Specifications:

	>>> id = ims.invokeFactory("Specification", 'spec1')
	>>> spec = ims[id]

Specifications are containers for several types of objects: 

	>>> id = spec.invokeFactory("PolicyQuestion", 'pq')
	>>> id = spec.invokeFactory("MethodologyReference", "mr")
	>>> id = spec.invokeFactory("RationaleReference", "rr")
	>>> id = spec.invokeFactory("WorkItem", "wi")
	>>> id = spec.invokeFactory("Assessment", 'as')

An Assessment can contain AssessmentParts:

	>>> as = spec['as']
	>>> id = as.invokeFactory("AssessmentPart", 'ap')

An AssessmentPart can contain EEAFigures:

	>>> ap = as['ap']
	>>> id = ap.invokeFactory("EEAFigure", 'ef')

Inside the ims folder, where the Specification was created, we will also create several
other objects that can be referenced from the Specification.

	>>> id = ims.invokeFactory("ExternalDataSpec", 'eds')
	>>> id = ims.invokeFactory("PolicyDocumentReference", 'pdr')


Relationships
-------------
The IMS uses the relatedItems field to store all relationships. We use the eea.relations 
widget and infrastructure to be able to specify which object a relation can contain.

	>>> reltool = portal['portal_relations']

Specifications can point to  PolicyDocumentReferences, ExternalDataSpecs and Data 
(from eea.dataservice).

	>>> id = ims.invokeFactory("Data", 'dt')
	>>> spec.setRelatedItems([ims['dt'], ims['eds'], ims['pdr']])

AssessmentParts point to the answered PolicyQuestion (but the relatedItems field here
is not multiValued):

	>>> ap.setRelatedItems(spec['pq'])

Installing the eea.indicators package will execute a setup step that installs new
objects in the portal_relations tools:

	>>> relations = getToolByName(portal, 'portal_relations')
	>>> ids = set(relations.objectIds())
	>>> our_ids = set(['specification', 'eea-data', 
	...								 'policy-document-reference', 'specification-eea-data', 
	...								 'specification-policy-document-reference'])
	>>> ids.intersection(our_ids) == our_ids
	True


Versioning and utility views
----------------------------

Editing the IMS should be done through a modified Edit form, which aggregates 
all content into a single view, to make editing the tree of objects easier.

	>>> spec = ims[ims.invokeFactory("Specification", 'spec2')]
    >>> spec_url = spec.absolute_url()

Object factories
~~~~~~~~~~~~~~~~
One important feature are the object factories: this is a concept were we
customize the process of creating an object. 

Note: these object factories are not the same as the ones from Plone. 

The following objects are created in the Edit view of Specification through object factories:

    >>> browser.open("%s/object_factory?type_name=RationaleReference" % spec_url)
    >>> browser.open("%s/object_factory?type_name=WorkItem" % spec_url)
    >>> browser.open("%s/object_factory?type_name=MethodologyReference" % spec_url)
    >>> browser.open("%s/object_factory?type_name=PolicyQuestion" % spec_url)
    >>> browser.open("%s/object_factory?type_name=Assessment" % spec_url)
    >>> print types_in_container(spec)
    ['Assessment', 'MethodologyReference', 'PolicyQuestion', 'RationaleReference', 'WorkItem']
    
An newly created Assessment should already have an AssessmentPart created, linked to the already 
created PolicyQuestion.

    >>> ast = spec.objectValues('Assessment')[0]
    >>> ast.objectValues()
    [<AssessmentPart at ...>]
    >>> ap = ast.objectValues('AssessmentPart')[0]
    >>> pq = spec.objectValues('PolicyQuestion')[0]
    >>> ap.getRelatedItems()[0] == pq
    True

Versioning
~~~~~~~~~~

Specifications have versions; a version of a specification is a new revision of the Spec; 
it is a completely restructured specification, with new format for Assessments. This is implemented
with eea.versions
 
Assessments have versions, each year the specifications gets new assessments. 

When creating a new version of a Specification, the new specification is a copy of the old, 
with the following exceptions:

 * none of the assessments are copied
 * the work items are not copied
 * the rest of the contained content items are copied

    >>> v_url = spec.unrestrictedTraverse('@@createVersion')()
    >>> print v_url
    http://nohost/plone/ims/spec2-1
    >>> v_spec = ims[v_url.split('/')[-1]]
    >>> print types_in_container(v_spec)
    ['MethodologyReference', 'PolicyQuestion', 'RationaleReference']

When creating a new version of an Assessment, the new assessment is a copy of the old, 
with the following exceptions:

 * All the EEAFigures contained inside are copy of the ones in the previous assessment 
   but must be linked as new versions of the figures in the older assessment.

    >>> spec = ims['spec2']
    >>> ast = spec.objectValues('Assessment')[0]
    >>> ap = ast.objectValues('AssessmentPart')[0]
    >>> browser.open('%s/object_factory?type_name=EEAFigure' % ap.absolute_url())
    >>> figure_1 = ap.objectValues('EEAFigure')[0]
    >>> print figure_1
    <EEAFigure at ...> 
    >>> v_ast = spec[ast.unrestrictedTraverse('@@createVersion')().split('/')[-1]]
    >>> print v_ast
    <Assessment at ...>
    >>> ap = v_ast.objectValues('AssessmentPart')[0]
    >>> figure_2 = ap.objectValues('EEAFigure')[0]
    >>> versions = figure_1.unrestrictedTraverse('@@getVersions')().values()
    >>> figure_1 in versions
    True
    >>> figure_2 in versions
    True

Adding a new Assessment will already create it as a version of the previous one.

EEAFigures inside an assessment cannot be versioned via the Plone GUI. Only when a user 
create a new Assessment new version of Figures are made and done by code (see above). 

When creating a new Assessment for a Specification, the Assessment should already contain
AssessmentParts created for all the PolicyQuestions
